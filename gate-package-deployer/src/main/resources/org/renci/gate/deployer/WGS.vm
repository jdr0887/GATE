
function setup() {

	# first some basic setup
	mkdir -p $APPLICATION_DIR
	mkdir -p $APPLICATION_DIR/apps
	mkdir -p $APPLICATION_DIR/bin
	mkdir -p $APPLICATION_DIR/logs
	mkdir -p $APPLICATION_DIR/src

	for BINARY in `ls -al $APPLICATION_DIR/bin | grep "${package}/${version}"`; do
		rm $APPLICATION_DIR/bin/$BINARY
	done

	# install the environement files
	pushd $APPLICATION_DIR; rm -f setup.sh; wget -q ${sourceURL}/environment/setup.sh; popd

}

function install() {

	# we depend on the perl-modules
	export PERLLIB=`find $APPLICATION_DIR/apps/perl-modules -type d -name '*thread*' -o -name '5*' | sort | uniq | xargs | sed 's/ /:/g'`
	
	# set up directories
	rm -rf $APPLICATION_DIR/src/${package}/*
	mkdir -p $APPLICATION_DIR/src/${package}
	rm -rf $APPLICATION_DIR/apps/${package}/${version}
	mkdir -p $APPLICATION_DIR/apps/${package}/${version}
	
	cd $APPLICATION_DIR/src/${package}
	wget -nv ${sourceURL}/packages/${runMode}/${archive}
	tar xjf ${archive}
	rm ${archive}
	
	cd wgs-${version}/kmer
	ln -s /usr/bin/make gmake
	export PATH=`pwd`:$PATH
	/bin/bash configure.sh
	make
	make install
	cd ../src
	make
	cd ../
	mv Linux* $APPLICATION_DIR/apps/${package}/${version}/
	
	WGS_ROOT=`ls -d $APPLICATION_DIR/apps/${package}/${version}/Linux-*`
	
	# create wrapper script
	cat > $APPLICATION_DIR/bin/runCA <<EOF
#!/bin/bash
	
export PATH=$WGS_ROOT/bin:\$PATH
	
exec runCA "\$@"
EOF
	chmod 755 $APPLICATION_DIR/bin/runCA

}

echo "Starting install of ${package}"
if setup > $APPLICATION_DIR/logs/${package}.build.log 2>&1 && install >> $APPLICATION_DIR/logs/${package}.build.log 2>&1; then
    echo "Success build of ${package}"
else
    echo "Build failed with exit code $?. 100 lines of output:"
    tail -n 100 $APPLICATION_DIR/logs/${package}.build.log
    APP_RC=1
fi





