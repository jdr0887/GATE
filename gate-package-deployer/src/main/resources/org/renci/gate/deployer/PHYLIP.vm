
function setup() {

	# first some basic setup
	mkdir -p $APPLICATION_DIR
	mkdir -p $APPLICATION_DIR/apps
	mkdir -p $APPLICATION_DIR/bin
	mkdir -p $APPLICATION_DIR/logs
	mkdir -p $APPLICATION_DIR/src

	for BINARY in `ls -al $APPLICATION_DIR/bin | grep "${package}/${version}"`; do
		rm $APPLICATION_DIR/bin/$BINARY
	done

	# install the environement files
	pushd $APPLICATION_DIR; rm -f setup.sh; wget -q ${sourceURL}/environment/setup.sh; popd

}

function install() {

	# set up directories
	rm -rf $APPLICATION_DIR/src/${package}
	mkdir -p $APPLICATION_DIR/src/${package}
	
	cd $APPLICATION_DIR/src/${package}
	wget -nv ${sourceURL}/packages/${runMode}/${archive}
	wget -nv ${sourceURL}/packages/${runMode}/phylip.patch
	
	tar xzf ${archive}
	cd phylip${version}/src
	
	# platform specifics
	case $host_cpu in
	    x86_64)
	        # build as 32 bit on RHEL4 opteron because of X libs are 32 bit
	        if cat /etc/redhat-release | grep Nahant >/dev/null 2>&1; then
	            perl -p -i -e "s/^CFLAGS  =.*/CFLAGS = -O2 -fomit-frame-pointer -m32/" Makefile
	        fi
	        ;;
	esac
	
	# include ~/lib
	#perl -p -i -e 's:^DLIBS=.*:DLIBS= -L/usr/X11R6/lib/ -L\${HOME}/lib/ -lX11 -lXaw -lXt:' Makefile
	
	perl -p -i -e "s:\"fontfile\":\"$APPLICATION_DIR/apps/${package}/${version}/fonts/fontfile\":" phylip.h
	make all
	make install
	
	# fix the fonts
	mkdir -p $APPLICATION_DIR/apps/${package}/${version}/fonts
	cp $APPLICATION_DIR/src/${package}/phylip${version}/exe/font* $APPLICATION_DIR/apps/${package}/${version}/fonts/
	cd $APPLICATION_DIR/apps/${package}/${version}/fonts/
	ln -s -f font1 fontfile
	
	# install
	mkdir -p $APPLICATION_DIR/apps/${package}/${version}/bin
	cp $APPLICATION_DIR/src/${package}/phylip${version}/exe/* $APPLICATION_DIR/apps/${package}/${version}/bin/
	
	# and a patched version
	cd $APPLICATION_DIR/src/${package}/phylip${version}/src
	make clean
	patch -p2 < ../..//phylip.patch
	make all
	make install
	
	# install patched version
	cd $APPLICATION_DIR/src/${package}/phylip${version}/exe/
	for FILE in `ls | grep -v font`; do 
	    cp $FILE $APPLICATION_DIR/apps/${package}/${version}/bin/$FILE-patched
	done
	
	# symlinks
	cd $APPLICATION_DIR/apps/${package}/${version}/bin
	for BINARY in `ls`; do
	    ln -s -f $APPLICATION_DIR/apps/${package}/${version}/bin/$BINARY $APPLICATION_DIR/bin/$BINARY
	done

}

echo "Starting install of ${package}"
if setup > $APPLICATION_DIR/logs/${package}.build.log 2>&1 && install >> $APPLICATION_DIR/logs/${package}.build.log 2>&1; then
    echo "Success build of ${package}"
else
    echo "Build failed with exit code $?. 100 lines of output:"
    tail -n 100 $APPLICATION_DIR/logs/${package}.build.log
    APP_RC=1
fi



